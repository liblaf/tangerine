{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Explore the docs \u00bb</p> <p> </p> <p>Changelog \u00b7 Report Bug \u00b7 Request Feature</p> <p></p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83c\udf4a Dynamic Templates: Embed live content in your files with Jinja2 templates that can pull data from GitHub, environment variables, and project configurations;</li> <li>\u26a1 Async Rendering: Process multiple files concurrently with asynchronous template rendering for improved performance;</li> <li>\ud83d\udd27 Extensible Filters: Customize output with built-in filters like emoji stripping and GitHub description fetching, plus support for custom Jinja2 filters;</li> <li>\ud83d\udcc1 Flexible Input/Output: Process files in-place or stream content via stdin/stdout, making it ideal for both manual use and CI/CD pipelines;</li> <li>\ud83e\udde9 Template Discovery: Automatically loads templates from both package resources and user-configured directories for easy customization;</li> <li>\ud83d\udd0d Git Integration: Seamlessly reads Copier answers from Git repositories to provide context-aware template variables.</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<p>To install <code>liblaf-tangerine</code>, run the following command:</p> <pre><code>uv add liblaf-tangerine\n</code></pre>"},{"location":"#local-development","title":"\u2328\ufe0f Local Development","text":"<p>You can use Github Codespaces for online development:</p> <p></p> <p>Or clone it for local development:</p> <pre><code>gh repo clone liblaf/tangerine\ncd tangerine\nmise run install\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions of all types are more than welcome, if you are interested in contributing code, feel free to check out our GitHub Issues to get stuck in to show us what you\u2019re made of.</p> <p></p> <p></p>"},{"location":"#more-fruits","title":"\ud83d\udd17 More Fruits","text":"<ul> <li>\ud83c\udf47 Grapes - Supercharge your Python with rich logging, precise timing, and seamless serialization.</li> <li>\ud83c\udf49 Melon - A comprehensive Python library for 3D mesh processing with advanced I/O capabilities, proximity analysis, and integration with external mesh processing tools.</li> <li>\ud83c\udf4a Tangerine - Squeeze dynamic content into your files with Tangerine\u2019s template magic.</li> <li>\ud83c\udf4b\u200d\ud83d\udfe9 Lime - AI-powered Git commit assistant and repository documentation generator</li> <li>\ud83c\udf4e Apple - A JAX and Warp library for differentiable physics simulation, featuring elastic energy models and finite element methods.</li> <li>\ud83c\udf52 Cherries - Sweet experiment tracking with Comet, DVC, and Git integration.</li> </ul>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>Copyright \u00a9 2025 liblaf.  This project is MIT licensed.</p>"},{"location":"reference/liblaf/tangerine/","title":"liblaf.tangerine","text":""},{"location":"reference/liblaf/tangerine/#liblaf.tangerine","title":"liblaf.tangerine","text":"<p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            </li> <li> <code>core</code>           \u2013            </li> <li> <code>plugin</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Args</code>           \u2013            <p>Args(files: Annotated[list[pathlib._local.Path], Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=False, count=False, default=ValueFrom(callable=, kwargs={}), help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)], in_place: Annotated[bool, Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=True, count=False, default=False, help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)]) <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              </li> <li> <code>run</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>__version__</code>               (<code>str</code>)           \u2013            </li> <li> <code>__version_tuple__</code>               (<code>tuple[int | str, ...]</code>)           \u2013            </li> <li> <code>version</code>               (<code>str</code>)           \u2013            </li> <li> <code>version_tuple</code>               (<code>tuple[int | str, ...]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__: str = '0.4.3.dev5+g204d353af'\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.__version_tuple__","title":"__version_tuple__  <code>module-attribute</code>","text":"<pre><code>__version_tuple__: tuple[int | str, ...] = (\n    0,\n    4,\n    3,\n    \"dev5\",\n    \"g204d353af\",\n)\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.version","title":"version  <code>module-attribute</code>","text":"<pre><code>version: str = '0.4.3.dev5+g204d353af'\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.version_tuple","title":"version_tuple  <code>module-attribute</code>","text":"<pre><code>version_tuple: tuple[int | str, ...] = (\n    0,\n    4,\n    3,\n    \"dev5\",\n    \"g204d353af\",\n)\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.Args","title":"Args","text":"<p>Args(files: Annotated[list[pathlib._local.Path], Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=False, count=False, default=ValueFrom(callable=, kwargs={}), help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)], in_place: Annotated[bool, Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=True, count=False, default=False, help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)]) <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>in_place</code>               (<code>bool</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>files</code>               (<code>Annotated[list[Path], Arg(default=ValueFrom(list))]</code>)           \u2013            </li> <li> <code>in_place</code>               (<code>Annotated[bool, Arg(long=True, default=False)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.Args.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[list[Path], Arg(default=ValueFrom(list))]\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.Args.in_place","title":"in_place  <code>instance-attribute</code>","text":"<pre><code>in_place: Annotated[bool, Arg(long=True, default=False)]\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>src/liblaf/tangerine/cli/_main.py</code> <pre><code>def main() -&gt; None:\n    asyncio.run(cappa.invoke_async(Args, version=__version__))\n</code></pre>"},{"location":"reference/liblaf/tangerine/#liblaf.tangerine.run","title":"run  <code>async</code>","text":"<pre><code>run(self: Args) -&gt; None\n</code></pre> Source code in <code>src/liblaf/tangerine/cli/invoke.py</code> <pre><code>async def run(self: Args) -&gt; None:\n    if not self.files:\n        self.files = [Path(\"-\")]\n    env = core.Environment()\n    await asyncio.gather(*(_process_file(env, file, args=self) for file in self.files))\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/","title":"liblaf.tangerine.cli","text":""},{"location":"reference/liblaf/tangerine/cli/#liblaf.tangerine.cli","title":"liblaf.tangerine.cli","text":"<p>Modules:</p> <ul> <li> <code>invoke</code>           \u2013            </li> <li> <code>parse</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Args</code>           \u2013            <p>Args(files: Annotated[list[pathlib._local.Path], Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=False, count=False, default=ValueFrom(callable=, kwargs={}), help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)], in_place: Annotated[bool, Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=True, count=False, default=False, help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)]) <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              </li> <li> <code>run</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/tangerine/cli/#liblaf.tangerine.cli.Args","title":"Args","text":"<p>Args(files: Annotated[list[pathlib._local.Path], Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=False, count=False, default=ValueFrom(callable=, kwargs={}), help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)], in_place: Annotated[bool, Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=True, count=False, default=False, help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)]) <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>in_place</code>               (<code>bool</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>files</code>               (<code>Annotated[list[Path], Arg(default=ValueFrom(list))]</code>)           \u2013            </li> <li> <code>in_place</code>               (<code>Annotated[bool, Arg(long=True, default=False)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/cli/#liblaf.tangerine.cli.Args.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[list[Path], Arg(default=ValueFrom(list))]\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/#liblaf.tangerine.cli.Args.in_place","title":"in_place  <code>instance-attribute</code>","text":"<pre><code>in_place: Annotated[bool, Arg(long=True, default=False)]\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/#liblaf.tangerine.cli.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> Source code in <code>src/liblaf/tangerine/cli/_main.py</code> <pre><code>def main() -&gt; None:\n    asyncio.run(cappa.invoke_async(Args, version=__version__))\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/#liblaf.tangerine.cli.run","title":"run  <code>async</code>","text":"<pre><code>run(self: Args) -&gt; None\n</code></pre> Source code in <code>src/liblaf/tangerine/cli/invoke.py</code> <pre><code>async def run(self: Args) -&gt; None:\n    if not self.files:\n        self.files = [Path(\"-\")]\n    env = core.Environment()\n    await asyncio.gather(*(_process_file(env, file, args=self) for file in self.files))\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/invoke/","title":"liblaf.tangerine.cli.invoke","text":""},{"location":"reference/liblaf/tangerine/cli/invoke/#liblaf.tangerine.cli.invoke","title":"liblaf.tangerine.cli.invoke","text":"<p>Functions:</p> <ul> <li> <code>run</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/tangerine/cli/invoke/#liblaf.tangerine.cli.invoke.run","title":"run  <code>async</code>","text":"<pre><code>run(self: Args) -&gt; None\n</code></pre> Source code in <code>src/liblaf/tangerine/cli/invoke.py</code> <pre><code>async def run(self: Args) -&gt; None:\n    if not self.files:\n        self.files = [Path(\"-\")]\n    env = core.Environment()\n    await asyncio.gather(*(_process_file(env, file, args=self) for file in self.files))\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/parse/","title":"liblaf.tangerine.cli.parse","text":""},{"location":"reference/liblaf/tangerine/cli/parse/#liblaf.tangerine.cli.parse","title":"liblaf.tangerine.cli.parse","text":"<p>Classes:</p> <ul> <li> <code>Args</code>           \u2013            <p>Args(files: Annotated[list[pathlib._local.Path], Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=False, count=False, default=ValueFrom(callable=, kwargs={}), help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)], in_place: Annotated[bool, Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=True, count=False, default=False, help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)])"},{"location":"reference/liblaf/tangerine/cli/parse/#liblaf.tangerine.cli.parse.Args","title":"Args","text":"<p>Args(files: Annotated[list[pathlib._local.Path], Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=False, count=False, default=ValueFrom(callable=, kwargs={}), help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)], in_place: Annotated[bool, Arg(value_name=&lt;_EmptyEnum.EMPTY: 0&gt;, short=False, long=True, count=False, default=False, help=None, parse=None, group=&lt;_EmptyEnum.EMPTY: 0&gt;, hidden=False, action=None, num_args=None, choices=None, completion=None, required=None, field_name=&lt;_EmptyEnum.EMPTY: 0&gt;, deprecated=False, show_default=True, propagate=False, destructure=None, has_value=None, type_view=None)]) <p>Parameters:</p> <ul> <li> <code>files</code>               (<code>list[Path]</code>)           \u2013            </li> <li> <code>in_place</code>               (<code>bool</code>)           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>files</code>               (<code>Annotated[list[Path], Arg(default=ValueFrom(list))]</code>)           \u2013            </li> <li> <code>in_place</code>               (<code>Annotated[bool, Arg(long=True, default=False)]</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/cli/parse/#liblaf.tangerine.cli.parse.Args.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: Annotated[list[Path], Arg(default=ValueFrom(list))]\n</code></pre>"},{"location":"reference/liblaf/tangerine/cli/parse/#liblaf.tangerine.cli.parse.Args.in_place","title":"in_place  <code>instance-attribute</code>","text":"<pre><code>in_place: Annotated[bool, Arg(long=True, default=False)]\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/","title":"liblaf.tangerine.core","text":""},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core","title":"liblaf.tangerine.core","text":"<p>Modules:</p> <ul> <li> <code>constants</code>           \u2013            </li> <li> <code>environment</code>           \u2013            </li> <li> <code>template</code>           \u2013            </li> </ul> <p>Type Aliases:</p> <ul> <li> <code>Segment</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            </li> <li> <code>Template</code>           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>TANGERINE_END</code>               (<code>str</code>)           \u2013            </li> <li> <code>TANGERINE_START</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.TANGERINE_END","title":"TANGERINE_END  <code>module-attribute</code>","text":"<pre><code>TANGERINE_END: str = 'tangerine-end'\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.TANGERINE_START","title":"TANGERINE_START  <code>module-attribute</code>","text":"<pre><code>TANGERINE_START: str = 'tangerine-start:'\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Segment","title":"Segment","text":"<pre><code>Segment = str | Template\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Environment","title":"Environment","text":"<p>Parameters:</p> <ul> <li> <code>jinja</code>               (<code>Environment</code>, default:                   <code>&lt;jinja2.environment.Environment object at 0x7fdc54c43890&gt;</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>parse</code>             \u2013              </li> <li> <code>render</code>             \u2013              </li> <li> <code>render_template</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>jinja</code>               (<code>Environment</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Environment.jinja","title":"jinja  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jinja: Environment = field(factory=_default_environment)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Environment.parse","title":"parse","text":"<pre><code>parse(text: str) -&gt; list[Segment]\n</code></pre> Source code in <code>src/liblaf/tangerine/core/environment.py</code> <pre><code>def parse(self, text: str) -&gt; list[Segment]:\n    lines: list[str] = text.splitlines()\n    segments: list[Segment] = []\n    in_template: bool = False\n    template_lines: list[str] = []\n    for line in lines:\n        if in_template:\n            template_lines.append(line)\n            if TANGERINE_END in line:\n                segments.append(Template.from_lines(template_lines))\n                in_template = False\n                template_lines = []\n        elif TANGERINE_START in line:\n            in_template = True\n            template_lines.append(line)\n        else:\n            segments.append(line)\n    return segments\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Environment.render","title":"render  <code>async</code>","text":"<pre><code>render(segments: list[Segment], **kwargs: str) -&gt; str\n</code></pre> Source code in <code>src/liblaf/tangerine/core/environment.py</code> <pre><code>async def render(self, segments: list[Segment], **kwargs: str) -&gt; str:\n    lines: list[str] = []\n    for segment in segments:\n        if isinstance(segment, Template):\n            lines.append(await self.render_template(segment, **kwargs))\n        else:\n            lines.append(segment)\n    text: str = \"\\n\".join(lines)\n    if not text.endswith(\"\\n\"):\n        text += \"\\n\"\n    return text\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Environment.render_template","title":"render_template  <code>async</code>","text":"<pre><code>render_template(template: Template, **kwargs: str) -&gt; str\n</code></pre> Source code in <code>src/liblaf/tangerine/core/environment.py</code> <pre><code>async def render_template(self, template: Template, **kwargs: str) -&gt; str:\n    try:\n        template_jinja: jinja2.Template = self.jinja.get_template(template.name)\n    except jinja2.TemplateNotFound as err:\n        for template_name in err.templates:\n            logger.warning(\"Template not found: {}\", template_name)\n        return \"\\n\".join(template.lines)\n    kwargs = toolz.merge(template.context, kwargs)\n    rendered: str = await template_jinja.render_async(kwargs)\n    rendered = rendered.strip()\n    lines: list[str] = rendered.splitlines()\n    rendered = \"\\n\".join(lines).strip()\n    rendered = template.lines[0] + \"\\n\" + rendered + \"\\n\" + template.lines[-1]\n    return rendered\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Template","title":"Template","text":"<p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>context</code>               (<code>Mapping[str, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>lines</code>               (<code>list[str]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>context</code>               (<code>Mapping[str, str]</code>)           \u2013            </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Template.context","title":"context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>context: Mapping[str, str] = field(factory=dict)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Template.lines","title":"lines  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lines: list[str] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Template.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = field()\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/#liblaf.tangerine.core.Template.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: list[str]) -&gt; Self\n</code></pre> Source code in <code>src/liblaf/tangerine/core/template.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: list[str]) -&gt; Self:\n    line: str = lines[0]\n    idx: int = line.find(TANGERINE_START)\n    line = line[idx + len(TANGERINE_START) :].strip()\n    items: list[str] = line.split(maxsplit=1)\n    name: str\n    vars_str: str\n    if len(items) == 1:\n        (name,) = items\n        vars_str = \"{}\"\n    else:\n        name, vars_str = items\n        vars_str = vars_str[vars_str.find(\"{\") :]\n        vars_str = vars_str[: vars_str.rfind(\"}\") + 1]\n    return cls(name=name, context=grapes.yaml.decode(vars_str) or {}, lines=lines)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/constants/","title":"liblaf.tangerine.core.constants","text":""},{"location":"reference/liblaf/tangerine/core/constants/#liblaf.tangerine.core.constants","title":"liblaf.tangerine.core.constants","text":"<p>Attributes:</p> <ul> <li> <code>TANGERINE_END</code>               (<code>str</code>)           \u2013            </li> <li> <code>TANGERINE_START</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/constants/#liblaf.tangerine.core.constants.TANGERINE_END","title":"TANGERINE_END  <code>module-attribute</code>","text":"<pre><code>TANGERINE_END: str = 'tangerine-end'\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/constants/#liblaf.tangerine.core.constants.TANGERINE_START","title":"TANGERINE_START  <code>module-attribute</code>","text":"<pre><code>TANGERINE_START: str = 'tangerine-start:'\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/environment/","title":"liblaf.tangerine.core.environment","text":""},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment","title":"liblaf.tangerine.core.environment","text":"<p>Type Aliases:</p> <ul> <li> <code>Segment</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment.Segment","title":"Segment","text":"<pre><code>Segment = str | Template\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment.Environment","title":"Environment","text":"<p>Parameters:</p> <ul> <li> <code>jinja</code>               (<code>Environment</code>, default:                   <code>&lt;jinja2.environment.Environment object at 0x7fdc54c43890&gt;</code> )           \u2013            </li> </ul> <p>Methods:</p> <ul> <li> <code>parse</code>             \u2013              </li> <li> <code>render</code>             \u2013              </li> <li> <code>render_template</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>jinja</code>               (<code>Environment</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment.Environment.jinja","title":"jinja  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>jinja: Environment = field(factory=_default_environment)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment.Environment.parse","title":"parse","text":"<pre><code>parse(text: str) -&gt; list[Segment]\n</code></pre> Source code in <code>src/liblaf/tangerine/core/environment.py</code> <pre><code>def parse(self, text: str) -&gt; list[Segment]:\n    lines: list[str] = text.splitlines()\n    segments: list[Segment] = []\n    in_template: bool = False\n    template_lines: list[str] = []\n    for line in lines:\n        if in_template:\n            template_lines.append(line)\n            if TANGERINE_END in line:\n                segments.append(Template.from_lines(template_lines))\n                in_template = False\n                template_lines = []\n        elif TANGERINE_START in line:\n            in_template = True\n            template_lines.append(line)\n        else:\n            segments.append(line)\n    return segments\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment.Environment.render","title":"render  <code>async</code>","text":"<pre><code>render(segments: list[Segment], **kwargs: str) -&gt; str\n</code></pre> Source code in <code>src/liblaf/tangerine/core/environment.py</code> <pre><code>async def render(self, segments: list[Segment], **kwargs: str) -&gt; str:\n    lines: list[str] = []\n    for segment in segments:\n        if isinstance(segment, Template):\n            lines.append(await self.render_template(segment, **kwargs))\n        else:\n            lines.append(segment)\n    text: str = \"\\n\".join(lines)\n    if not text.endswith(\"\\n\"):\n        text += \"\\n\"\n    return text\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/environment/#liblaf.tangerine.core.environment.Environment.render_template","title":"render_template  <code>async</code>","text":"<pre><code>render_template(template: Template, **kwargs: str) -&gt; str\n</code></pre> Source code in <code>src/liblaf/tangerine/core/environment.py</code> <pre><code>async def render_template(self, template: Template, **kwargs: str) -&gt; str:\n    try:\n        template_jinja: jinja2.Template = self.jinja.get_template(template.name)\n    except jinja2.TemplateNotFound as err:\n        for template_name in err.templates:\n            logger.warning(\"Template not found: {}\", template_name)\n        return \"\\n\".join(template.lines)\n    kwargs = toolz.merge(template.context, kwargs)\n    rendered: str = await template_jinja.render_async(kwargs)\n    rendered = rendered.strip()\n    lines: list[str] = rendered.splitlines()\n    rendered = \"\\n\".join(lines).strip()\n    rendered = template.lines[0] + \"\\n\" + rendered + \"\\n\" + template.lines[-1]\n    return rendered\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/template/","title":"liblaf.tangerine.core.template","text":""},{"location":"reference/liblaf/tangerine/core/template/#liblaf.tangerine.core.template","title":"liblaf.tangerine.core.template","text":"<p>Classes:</p> <ul> <li> <code>Template</code>           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/template/#liblaf.tangerine.core.template.Template","title":"Template","text":"<p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>context</code>               (<code>Mapping[str, str]</code>, default:                   <code>&lt;class 'dict'&gt;</code> )           \u2013            <p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object\u2019s     (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via:     d = {}     for k, v in iterable:         d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs     in the keyword argument list.  For example:  dict(one=1, two=2)</p> </li> <li> <code>lines</code>               (<code>list[str]</code>, default:                   <code>&lt;dynamic&gt;</code> )           \u2013            <p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>context</code>               (<code>Mapping[str, str]</code>)           \u2013            </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/liblaf/tangerine/core/template/#liblaf.tangerine.core.template.Template.context","title":"context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>context: Mapping[str, str] = field(factory=dict)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/template/#liblaf.tangerine.core.template.Template.lines","title":"lines  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lines: list[str] = field(factory=list)\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/template/#liblaf.tangerine.core.template.Template.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = field()\n</code></pre>"},{"location":"reference/liblaf/tangerine/core/template/#liblaf.tangerine.core.template.Template.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: list[str]) -&gt; Self\n</code></pre> Source code in <code>src/liblaf/tangerine/core/template.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: list[str]) -&gt; Self:\n    line: str = lines[0]\n    idx: int = line.find(TANGERINE_START)\n    line = line[idx + len(TANGERINE_START) :].strip()\n    items: list[str] = line.split(maxsplit=1)\n    name: str\n    vars_str: str\n    if len(items) == 1:\n        (name,) = items\n        vars_str = \"{}\"\n    else:\n        name, vars_str = items\n        vars_str = vars_str[vars_str.find(\"{\") :]\n        vars_str = vars_str[: vars_str.rfind(\"}\") + 1]\n    return cls(name=name, context=grapes.yaml.decode(vars_str) or {}, lines=lines)\n</code></pre>"},{"location":"reference/liblaf/tangerine/plugin/","title":"liblaf.tangerine.plugin","text":""},{"location":"reference/liblaf/tangerine/plugin/#liblaf.tangerine.plugin","title":"liblaf.tangerine.plugin","text":"<p>Functions:</p> <ul> <li> <code>github_description</code>             \u2013              </li> <li> <code>strip_emoji</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/tangerine/plugin/#liblaf.tangerine.plugin.github_description","title":"github_description  <code>async</code>","text":"<pre><code>github_description(repository: str) -&gt; str\n</code></pre> Source code in <code>src/liblaf/tangerine/plugin/_github.py</code> <pre><code>async def github_description(repository: str) -&gt; str:\n    gh: githubkit.GitHub = _get_github_client()\n    owner: str\n    repo: str\n    owner, _, repo = repository.partition(\"/\")\n    full_repo: ghm.FullRepository = (\n        await gh.rest.repos.async_get(owner, repo)\n    ).parsed_data\n    return full_repo.description or \"\"\n</code></pre>"},{"location":"reference/liblaf/tangerine/plugin/#liblaf.tangerine.plugin.strip_emoji","title":"strip_emoji","text":"<pre><code>strip_emoji(text: str) -&gt; str\n</code></pre> Source code in <code>src/liblaf/tangerine/plugin/_text.py</code> <pre><code>def strip_emoji(text: str) -&gt; str:\n    if not text:\n        return text\n    text = emoji.replace_emoji(text)\n    text = text.strip()\n    return text\n</code></pre>"},{"location":"reference/liblaf/tangerine/utils/","title":"liblaf.tangerine.utils","text":""},{"location":"reference/liblaf/tangerine/utils/#liblaf.tangerine.utils","title":"liblaf.tangerine.utils","text":"<p>Functions:</p> <ul> <li> <code>app_dirs</code>             \u2013              </li> </ul>"},{"location":"reference/liblaf/tangerine/utils/#liblaf.tangerine.utils.app_dirs","title":"app_dirs","text":"<pre><code>app_dirs() -&gt; AppDirs\n</code></pre> Source code in <code>src/liblaf/tangerine/utils/_app_dirs.py</code> <pre><code>def app_dirs() -&gt; platformdirs.AppDirs:\n    return platformdirs.AppDirs(appname=\"liblaf/tangerine\", appauthor=\"liblaf\")\n</code></pre>"}]}